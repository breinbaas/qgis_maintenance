# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MLASMaintenanceDialog
                                 A QGIS plugin
 MLAS Data maintenance plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by LeveeLogic
        email                : breinbaasnl@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import json

from sqlalchemy import exc
from sqlalchemy.sql.expression import except_


from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QSettings

from .database import CPTMetaData, Database

from mlaslib.helpers import case_insensitive_glob

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'mlas_maintenance_dialog_base.ui'))



class MLASMaintenanceDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MLASMaintenanceDialog, self).__init__(parent)
        self.owner = "Waternet"
        self.settings = QSettings('LeveeLogic', 'MLASMaintenance')
        self.setupUi(self)
        self.setupSignalSlots()
        self.database = Database()     
        self._connectDatabase(
            self.settings.value('username', ''), 
            self.settings.value('password', ''),
            self.settings.value('hostname', ''),
            self.settings.value('port', 5432),
            self.settings.value('databasename', ''), 
            feedback=False,
        )
        self.initUI()  

    
    def _connectDatabase(self, username, password, hostname, port, databasename, feedback=True):
        self.lblDatabaseConnection.setText('Database disconnected')        
        try:
            self.database.connect(username, password, hostname, port, databasename)   
            self.lblDatabaseConnection.setText('Database connected')           
        except Exception as e:
            if feedback:
                raise ValueError(e)

    def setupSignalSlots(self):
        self.btnTestDatabase.clicked.connect(self.onBtnTestDatabaseClicked)
        self.btnSaveDBSettings.clicked.connect(self.onBtnSaveDBSettings)
        self.btnCptPath.clicked.connect(self.onBtnCptPathClicked)
        self.btnBoreholePath.clicked.connect(self.onBtnBoreholePathClicked)
        self.btnDStabilityPath.clicked.connect(self.onBtnDStabilityPathClicked)
        self.btnOutputPath.clicked.connect(self.onBtnOutputPathClicked)
        self.btnCptSync.clicked.connect(self.onBtnCptSyncClicked)
        self.btnCreateDatabase.clicked.connect(self.onBtnCreateDatabase)

    def initUI(self):
        self.leHostName.setText(self.settings.value('hostname',''))
        self.spPort.setValue(self.settings.value('port',5432))
        self.leUserName.setText(self.settings.value('username',''))
        self.leDatabaseName.setText(self.settings.value('databasename',''))
        self.leCptPath.setText(self.settings.value('cpt_path'))
        self.leBoreholePath.setText(self.settings.value('borehole_path'))
        self.leDStabPath.setText(self.settings.value('dstab_path'))
        self.leOutputPath.setText(self.settings.value('output_path'))
        
        

    def _selectPathDialog(self, message: str):
        return str(QtWidgets.QFileDialog.getExistingDirectory(self, ))

    #############
    # UI EVENTS #
    #############        
    def onBtnCptPathClicked(self):
        path = self._selectPathDialog(message="Select path to CPT data")
        if path != "":
            self.leCptPath.setText(path)
            self.settings.setValue('cpt_path', path)

    def onBtnBoreholePathClicked(self):
        path = self._selectPathDialog(message="Select path to borehole data")
        if path != "":
            self.leBoreholePath.setText(path)
            self.settings.setValue('borehole_path', path)

    def onBtnDStabilityPathClicked(self):
        path = self._selectPathDialog(message="Select path to the DStability Console")
        if path != "":
            self.leDStabPath.setText(path)
            self.settings.setValue('dstab_path', path)

    def onBtnOutputPathClicked(self):
        path = self._selectPathDialog(message="Select path to write output files to")
        if path != "":
            self.leOutputPath.setText(path)
            self.settings.setValue('output_path', path)

    def onBtnTestDatabaseClicked(self):
        username = self.leUserName.text()
        password = self.lePassword.text()
        hostname = self.leHostName.text()
        port = self.spPort.value()
        databasename = self.leDatabaseName.text()
               
        try:
            self._connectDatabase(username, password, hostname, port, databasename, feedback=True)
            # todo messagebox, geslaagd, vergeet niet te saven
                     
        except Exception as e:
            print(f'got error {e}')

    def onBtnSaveDBSettings(self):
        self.settings.setValue('username', self.leUserName.text())
        self.settings.setValue('password', self.lePassword.text())
        self.settings.setValue('hostname', self.leHostName.text())
        self.settings.setValue('port', self.spPort.value())
        self.settings.setValue('databasename', self.leDatabaseName.text())

    def onBtnCreateDatabase(self):
        # TODO show error if not connected
        if not self.database.is_connected:
            pass

        try:
            self.database.create()
        except Exception as e:
            #TODO show error, possible already exists
            raise e
    
    def onBtnCptSyncClicked(self):
        # checks
        # database connection? cptpath set?
        if not self.database.is_connected:
            # TODO
            print('todo error database not connected')
            return

        cptpath = self.settings.value('cpt_path')
        if cptpath == "":
            # TODO
            print('todo error cpt path not set')
            return

        # STEP 1 - read all existing CPTs from database -> List[CPTMetaData]
        db_cpts = self.database.get_cpt_metadata(self.owner)
        # create kind of a unique id list based on x, y and z
        cptids_in_db = [f"{cpt.x:.2f}_{cpt.y:.2f}_{cpt.z:.2f}" for cpt in db_cpts]        

        # STEP 2 - read all files in the given path
        self.lblLog.setText('updating database...')        
        cptfiles = case_insensitive_glob(cptpath, '.gef')
        self.pbarSyncCpts.setValue(0)
        self.pbarSyncCpts.setMaximum(len(cptfiles))

        app = QtWidgets.QApplication.instance()

        for i, cptfile in enumerate(cptfiles):
            self.pbarSyncCpts.setValue(i+1)
            app.processEvents()

            try:
                cptm = CPTMetaData.from_gef(cptfile)
            except Exception as e:
                self.tbCptLog.append(f"{e}")

            # check if this CPT is in the database
            cptid = f"{cptm.x:.2f}_{cptm.y:.2f}_{cptm.z:.2f}"

            in_db = cptid in cptids_in_db
            
            if in_db and self.cbCptSyncForceUpdate.isChecked():
                raise NotImplementedError('database update not yet implemented!')
                continue
            
            if not in_db:
                self.database.add_cpt(self.owner, cptm, cptfile)
        
        self.pbarSyncCpts.setValue(0)
        self.lblLog.clear()

        
        
